#!/usr/bin/env python

import os
import sys
import time
import optparse
import ConfigParser
import logging
from multiprocessing import Process
from watchdog.observers import Observer
from watchdog.events import PatternMatchingEventHandler
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport.TTransport import TTransportException
from thrift.protocol import TBinaryProtocol
from scribe import scribe

class Scribe(object):
    def __init__(self, host, port, prefix='', postfix=''):
        self.host = host
        self.port = port
        self.prefix = prefix
        self.postfix = postfix

    def connect(self):
        socket = TSocket.TSocket(host=self.host, port=self.port)
        transport = TTransport.TFramedTransport(socket)
        protocol = TBinaryProtocol.TBinaryProtocol(
            trans=transport,
            strictRead=False,
            strictWrite=False,
        )
        client = scribe.Client(iprot=protocol, oprot=protocol)
        self.client = client
        self.transport = transport
        transport.open()
 
    def send(self, category, line):
        result = 0
        try:
            log_entry = scribe.LogEntry(
                category=category,
                message=self.prefix+line+self.postfix,
            )
        except TypeError:
            self.scribe_fix_legacy()
            log_entry = scribe.LogEntry(
                category=category,
                message=self.prefix+line+self.postfix,
            )

        result = self.client.Log(messages=[log_entry])
        if result == scribe.ResultCode.OK:
            pass
        elif result == scribe.ResultCode.TRY_LATER:
            raise Error('Scribe Error: TRY LATER')
        else:
            raise Error('Scribe Error: Unknown error code (%s)' % result)

    def scribe_fix_legacy(self):
        global scribe
        old_log_entry = scribe.LogEntry
        def new_log_entry(**kwargs):
            return old_log_entry(kwargs)
        scribe.LogEntry = new_log_entry

class LogHandler(PatternMatchingEventHandler):

    def __init__(self, scribe_client, category):
        PatternMatchingEventHandler.__init__(self)
        self.scribe_client = scribe_client
        self.category = category
        self.fs = {}

    def open(self, path):
        try:
            f = open(path)
            f.seek(0, 2)
            pos = f.tell()
            inode = os.stat(path).st_ino
            self.fs[path] = {}
            self.fs[path]['fp'] = f
            self.fs[path]['pos'] = pos
            self.fs[path]['inode'] = inode
            return f
        except Exception:
            pass
    
    def check(self, path):
        stat = os.stat(path)
        if self.fs[path]['inode'] != stat.st_ino:
            return True
        if self.fs[path]['pos'] > stat.st_size:
            return True
        return False

    def process(self, event):
        if not os.path.isfile(event.src_path):
            return

        if not self.fs.has_key(event.src_path):
            self.open(event.src_path)
        else:
            if self.check(event.src_path):
                f = self.fs[event.src_path]['fp']
                f.close()
                self.open(event.src_path)

        f = self.fs[event.src_path]['fp']
        while True: 
            self.fs[event.src_path]['pos'] = f.tell()
            line = f.readline()
            if not line:
                break
            else:
                self.scribe_client.send(self.category, line)

    def on_modified(self, event):
        try:
            self.process(event)
        except Exception:
            pass

    def on_created(self, event):
        try:
            self.process(event)
        except Exception:
            pass
        
class AccessHandler(LogHandler): 
    patterns = ['*_access.log']

    def __init__(self, scribe_client, category):
        LogHandler.__init__(self, scribe_client, category)

class ErrorHandler(LogHandler): 
    patterns = ['*error.log']

    def __init__(self, scribe_client, category):
        LogHandler.__init__(self, scribe_client, category)

class SubreqHandler(LogHandler): 
    patterns = ['*_subreq.log']

    def __init__(self, scribe_client, category):
        LogHandler.__init__(self, scribe_client, category)

class StatsHandler(LogHandler): 
    patterns = ['*stats*']

    def __init__(self, scribe_client, category):
        LogHandler.__init__(self, scribe_client, category)

    def get_timestamp(self, path):
        list = path.split('/')
        data = list[6]
        hour = list[7]
        nowtime = data + ':' + hour
        timearray = time.strptime(nowtime, "%Y-%m-%d:%H")
        timestamp = int(time.mktime(timearray))
        return timestamp

    def check(self, path):
        if len(self.fs) > 0:
            now_time = self.get_timestamp(path)
            paths = self.fs.keys()
            old_time = self.get_timestamp(paths[0])
            if now_time > old_time:
                for src_path in paths:
                    f = self.fs[src_path]['fp']
                    f.close()
                self.fs.clear()

    def process(self, event):
        if not os.path.isfile(event.src_path):
            return

        if not self.fs.has_key(event.src_path):
            self.check(event.src_path)
            self.open(event.src_path)

        f = self.fs[event.src_path]['fp']
        while True: 
            self.fs[event.src_path]['pos'] = f.tell()
            line = f.readline()
            if not line:
                break
            else:
                self.scribe_client.send(self.category, line)

def ThreadHandler(host, port, prefix, category, path):
    observer = Observer()
    srb = Scribe(host, port, prefix)
    srb.connect()

    if category == 'access':
        observer.schedule(AccessHandler(srb, category), path=path, recursive=False)
    elif category == 'error':
        observer.schedule(ErrorHandler(srb, category), path=path, recursive=False)
    elif category == 'subreq':
        observer.schedule(SubreqHandler(srb, category), path=path, recursive=False)
    elif category == 'uve_core':
        observer.schedule(StatsHandler(srb, category), path=path, recursive=True)
    else:
        print('No such category')
        sys.exit(1)
    observer.start()

    try:
        while True:
            time.sleep(1)
    except Exception:
        pass

    #can't execute here
    observer.stop()
    observer.join()

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option('-c', '--config',
                     dest='config_file',
                     help='configuration file',
                     metavar='CONFIG')
    options, args = parser.parse_args()

    if options.config_file:
        try:
            cf = ConfigParser.ConfigParser()

            cf.read('scribe_conf')
            host = cf.get('scribe', 'host')
            port = cf.getint('scribe', 'port')
            prefix = cf.get('scribe', 'prefix')
            opts = cf.options('category')
            for opt in opts: 
                start = cf.getint('category', opt)
                if start:
                    path = cf.get(opt, 'path')
                    p = Process(target=ThreadHandler, args=(host, port, prefix, opt, path))
                    p.daemon = True
                    p.start()
        except Exception, e:
            print e
            sys.exit(1)
    else:
        parser.print_help()
        sys.exit(1)
          
    try:
        while True:
            time.sleep(1)
    except Exception:
        pass
